{"version":3,"sources":["service/share-buttons.service.ts"],"names":["core_1","require","http_1","rxjs_1","share_provider_enum_1","ShareButtonsService","http","jsonp","this","windowWidth","windowHeight","prototype","share","type","args","ShareProvider","FACEBOOK","fbShare","TWITTER","twitterShare","LINKEDIN","linkedInShare","REDDIT","redditShare","TUMBLR","tumblrShare","STUMBLEUPON","stumbleShare","GOOGLEPLUS","gPlusShare","PINTEREST","pinShare","shareUrl","url","title","description","image","twitterAccount","tags","toString","desc","document","querySelector","getAttribute","count","fbCount","linkedInCount","redditCount","tumblrCount","gPlusCount","pinCount","Observable","empty","fetch","map","data","json","hasOwnProperty","share_count","fetchJsonp","children","length","score","body","exports","gplusCountBody","post","result","metadata","globalCounts","text","JSON","parse","replace","response","note_count","get","catch","err","console","warn","request","windowAttr","__decorate","Injectable","method","id","params","nolog","source","userId","groupId","jsonrpc","key","apiVersion"],"mappings":"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","file":"service/share-buttons.service.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Http, Jsonp} from \"@angular/http\";\nimport {Observable} from \"rxjs\";\n\nimport {ShareProvider} from \"../helpers/share-provider.enum\";\nimport {ShareButtonsInterface} from \"./share-buttons.interface\";\nimport {ShareArgs} from \"../helpers/share-buttons.class\";\n\n@Injectable()\nexport class ShareButtonsService implements ShareButtonsInterface {\n\n    /** Optional parameters for to set default inputs */\n    windowWidth: number = 500;\n    windowHeight: number = 400;\n\n    /** Site Twitter Account: Add Via @TwitterAccount to the tweet  */\n    twitterAccount: string;\n\n    constructor(private http: Http, private jsonp: Jsonp) {\n    }\n\n    share(type, args) {\n        switch (type) {\n            case ShareProvider.FACEBOOK:\n                return this.fbShare(args);\n            case ShareProvider.TWITTER:\n                return this.twitterShare(args);\n            case ShareProvider.LINKEDIN:\n                return this.linkedInShare(args);\n            case ShareProvider.REDDIT:\n                return this.redditShare(args);\n            case ShareProvider.TUMBLR:\n                return this.tumblrShare(args);\n            case ShareProvider.STUMBLEUPON:\n                return this.stumbleShare(args);\n            case ShareProvider.GOOGLEPLUS:\n                return this.gPlusShare(args);\n            case ShareProvider.PINTEREST:\n                return this.pinShare(args);\n            default:\n                return '';\n        }\n    }\n\n    private fbShare(args: ShareArgs) {\n        let shareUrl = 'https://www.facebook.com/sharer/sharer.php?u=' + args.url;\n        if (args.title) {\n            shareUrl += \"&title=\" + args.title;\n        }\n        if (args.description) {\n            shareUrl += \"&description=\" + args.description;\n        }\n        if (args.image) {\n            shareUrl += \"&picture=\" + args.image;\n        }\n        return shareUrl;\n    }\n\n    //TWITTER DOCS: https://dev.twitter.com/web/tweet-button/web-intent\n    private twitterShare(args: ShareArgs) {\n        let shareUrl = 'https://twitter.com/intent/tweet?url=' + args.url;\n        if (args.description) {\n            shareUrl += '&text=' + args.description;\n        }\n        if (this.twitterAccount) {\n            shareUrl += '&via=' + this.twitterAccount;\n        }\n        if (args.tags) {\n            shareUrl += '&hashtags=' + args.tags.toString();\n        }\n        return shareUrl;\n    }\n\n    //LINKEDIN DOCS https://developer.linkedin.com/docs/share-on-linkedin#!\n    private linkedInShare(args: ShareArgs) {\n        let shareUrl = 'http://www.linkedin.com/shareArticle?url=' + args.url;\n        if (args.title) {\n            shareUrl += \"&title=\" + args.title;\n        }\n        if (args.description) {\n            shareUrl += \"&summary=\" + args.description;\n        }\n        return shareUrl;\n    }\n\n    //REDDIT DOCS: http://stackoverflow.com/questions/24823114/post-to-reddit-via-url\n    private redditShare(args: ShareArgs) {\n        let shareUrl = 'http://www.reddit.com/submit?url=' + args.url;\n        if (args.title) {\n            shareUrl += \"&title=\" + args.title;\n        }\n        return shareUrl\n    }\n\n    //TUMBLR DOCS: https://www.tumblr.com/docs/en/share_button\n    private tumblrShare(args: ShareArgs) {\n        let shareUrl = 'http://tumblr.com/widgets/share/tool?canonicalUrl=' + args.url;\n        if (args.description) {\n            shareUrl += \"&caption=\" + args.description;\n        }\n        if (args.tags) {\n            shareUrl += \"&tags=\" + args.tags;\n        }\n        return shareUrl;\n    }\n\n    //STUMBLE DOCS: http://stackoverflow.com/questions/10591424/how-can-i-create-a-custom-stumbleupon-button\n    private stumbleShare(args: ShareArgs) {\n        return 'http://www.stumbleupon.com/submit?url=' + args.url;\n    }\n\n    //GPLUS DOCS: https://developers.google.com/+/web/share/#sharelink\n    private gPlusShare(args: ShareArgs) {\n        return 'https://plus.google.com/share?url=' + args.url;\n    }\n\n    private pinShare(args: ShareArgs) {\n        let shareUrl = 'https://in.pinterest.com/pin/create/button/?url=' + args.url;\n        //if text is not provided, pin button won't work.\n        if (args.description) {\n            shareUrl += '&description=' + args.description;\n        }\n        else {\n            let desc = document.querySelector('meta[property=\"og:description\"]').getAttribute('content');\n            shareUrl += '&description=' + desc;\n        }\n        if (args.image) {\n            shareUrl += '&media=' + args.image;\n        }\n        else {\n            let image = document.querySelector('meta[property=\"og:image\"]').getAttribute('content');\n            shareUrl += '&media=' + image;\n        }\n        return shareUrl;\n    }\n\n\n    /** Share Counts */\n\n    count(type, url) {\n        switch (type) {\n            case ShareProvider.FACEBOOK:\n                return this.fbCount(url);\n            case ShareProvider.LINKEDIN:\n                return this.linkedInCount(url);\n            case ShareProvider.REDDIT:\n                return this.redditCount(url);\n            case ShareProvider.TUMBLR:\n                return this.tumblrCount(url);\n            case ShareProvider.GOOGLEPLUS:\n                return this.gPlusCount(url);\n            case ShareProvider.PINTEREST:\n                return this.pinCount(url);\n            default:\n                return Observable.empty();\n        }\n    }\n\n    private fbCount(url: string) {\n        return this.fetch('https://graph.facebook.com/?id=' + url)\n            .map((data: any) => {\n                data = data.json();\n                if (data.hasOwnProperty('share') && data.share.hasOwnProperty('share_count')) {\n                    return data.share.share_count;\n                }\n                return 0;\n            });\n    }\n\n    private linkedInCount(url: string) {\n        return this.fetchJsonp('https://www.linkedin.com/countserv/count/share?url=' + url)\n            .map((data: any) => {\n                data = data.json();\n                return data.count | 0;\n            });\n    }\n\n    private redditCount(url: string) {\n        return this.fetch('https://buttons.reddit.com/button_info.json?url=' + url)\n            .map((data: any)=> {\n                data = data.json();\n                if (data.hasOwnProperty('data') && data.data.hasOwnProperty('children')) {\n                    if (data.data.children.length) return data.data.children[0].data.score;\n                }\n                return 0;\n            });\n    }\n\n    private gPlusCount(url: string) {\n        let body = gplusCountBody(url);\n        return this.http.post('https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ', body)\n            .map((data: any)=> {\n                data = data.json();\n                if (data[0] && data[0].hasOwnProperty('result')) {\n                    return data[0].result.metadata.globalCounts.count;\n                }\n                return 0;\n            });\n    }\n\n    private pinCount(url: string) {\n        return this.fetch('https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url=' + url)\n            .map((data: any)=> {\n                data = data.text();\n                var result = JSON.parse(data.replace(/^receiveCount\\((.*)\\)/, '$1'));\n                return result.count | 0;\n            });\n    }\n\n    private tumblrCount(url: string) {\n        return this.fetchJsonp('https://api.tumblr.com/v2/share/stats?url=' + url)\n            .map((data: any) => {\n                data = data.json();\n                if (data.hasOwnProperty('response') && data.response.hasOwnProperty('note_count')) {\n                    return data.response.note_count;\n                }\n                return 0;\n            });\n    }\n\n    private fetch(url) {\n        return this.http.get(url)\n            .catch((err)=> {\n                console.warn('[ShareService HTTP]: ', err);\n                return Observable.empty();\n            });\n    }\n\n    private fetchJsonp(url) {\n        return this.jsonp.request(url + '&format=jsonp&callback=JSONP_CALLBACK')\n            .catch((err)=> {\n                console.warn('[ShareService JSONP]: ', err);\n                return Observable.empty();\n            });\n    }\n\n    windowAttr() {\n        return 'width=' + this.windowWidth + ', height=' + this.windowHeight;\n    }\n}\n\n\n/** Prepare GPlus Count Post request body   */\nexport const gplusCountBody = (url) => {\n    return [{\n        \"method\": \"pos.plusones.get\",\n        \"id\": \"p\",\n        \"params\": {\"nolog\": true, \"id\": url, \"source\": \"widget\", \"userId\": \"@viewer\", \"groupId\": \"@self\"},\n        \"jsonrpc\": \"2.0\",\n        \"key\": \"p\",\n        \"apiVersion\": \"v1\"\n    }];\n};"],"sourceRoot":"/source/"}